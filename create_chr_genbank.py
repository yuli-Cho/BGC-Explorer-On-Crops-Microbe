from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from BCBio import GFF
from Bio.Seq import Seq
from Bio.SeqFeature import SeqFeature, FeatureLocation, CompoundLocation
import sys
import re
from collections import defaultdict

def standardize_chr_id(chr_id):
    """Convert chromosome IDs to Chr format"""
    chr_id = re.sub(r'^chr\s*', '', str(chr_id), flags=re.IGNORECASE).strip()
    if chr_id.isdigit():
        return f"Chr{chr_id}"
    return chr_id

def validate_locations(locations):
    """Validate and sort location pairs"""
    valid_locations = []
    for loc in locations:
        start = min(loc['start'], loc['end'])
        end = max(loc['start'], loc['end'])
        if start < end:
            loc['start'] = start
            loc['end'] = end
            valid_locations.append(loc)
    return sorted(valid_locations, key=lambda x: x['start'])

def process_gff_and_fasta(fasta_file, gff_file, output_gbk):
    print("Reading FASTA file and creating chromosome records...")
    chr_records = {}
    
    for record in SeqIO.parse(fasta_file, "fasta"):
        std_id = standardize_chr_id(record.id)
        gb_record = SeqRecord(
            seq=record.seq,
            id=std_id,
            name=std_id,
            description=f"Plant chromosome {std_id}"
        )
        
        gb_record.annotations.update({
            "accession": std_id,
            "date": "27-DEC-2024",
            "data_file_division": "PLN",
            "molecule_type": "DNA",
            "topology": "linear",
            "organism": "Plant",
            "source": "Plant chromosome",
            "comment": "Generated by HHeng-bioinfo on 2024-12-27 08:39:04 UTC"
        })
        
        gb_record.features = []
        chr_records[std_id] = gb_record
        numeric_id = std_id.replace('Chr', '')
        chr_records[numeric_id] = gb_record

    print("Processing GFF file...")
    
    # Store features by their relationships
    mrna_features = defaultdict(list)  # parent_id -> list of mRNA features
    cds_features = defaultdict(list)   # mRNA_id -> list of CDS features
    
    # First pass: collect all features
    print("Collecting features...")
    with open(gff_file) as gff_handle:
        for line in gff_handle:
            if line.startswith('#') or not line.strip():
                continue
                
            fields = line.strip().split('\t')
            if len(fields) < 9:
                continue
            
            feature_type = fields[2].upper()
            if feature_type not in ['MRNA', 'CDS']:
                continue
                
            chr_id = standardize_chr_id(fields[0])
            if chr_id not in chr_records:
                continue
            
            try:
                start = int(fields[3]) - 1
                end = int(fields[4])
                strand = 1 if fields[6] == '+' else -1
                
                # Parse attributes
                attributes = {}
                for attr in fields[8].split(';'):
                    if '=' in attr:
                        key, value = attr.split('=', 1)
                        attributes[key] = value
                
                feature_data = {
                    'start': start,
                    'end': end,
                    'strand': strand,
                    'attributes': attributes,
                    'chr_id': chr_id
                }
                
                if feature_type == 'MRNA':
                    parent_id = attributes.get('Parent', '').split(',')[0]
                    feature_id = attributes.get('ID', '')
                    if feature_id:
                        mrna_features[parent_id].append((feature_id, feature_data))
                        
                elif feature_type == 'CDS':
                    parent_id = attributes.get('Parent', '').split(',')[0]
                    if parent_id:
                        cds_features[parent_id].append(feature_data)
                        
            except Exception as e:
                print(f"Warning: Could not parse line: {line.strip()}\nError: {str(e)}")

    # Second pass: create features in GenBank records
    print("Creating GenBank features...")
    feature_count = 0
    
    for parent_id, mrnas in mrna_features.items():
        for mrna_id, mrna_data in mrnas:
            try:
                chr_id = mrna_data['chr_id']
                feature_count += 1
                
                # Create mRNA feature
                mrna_feature = SeqFeature(
                    FeatureLocation(mrna_data['start'], mrna_data['end'], 
                                  strand=mrna_data['strand']),
                    type='mRNA'
                )
                
                mrna_feature.qualifiers = {
                    'locus_tag': [f"{chr_id}_mrna_{feature_count}"],
                    'transcript_id': [mrna_id]
                }
                
                # Add additional mRNA qualifiers from GFF
                for key, value in mrna_data['attributes'].items():
                    if key.lower() not in ['id', 'parent']:
                        mrna_feature.qualifiers[key.lower()] = [value]
                
                # Add mRNA feature to record
                chr_records[chr_id].features.append(mrna_feature)
                
                # Process associated CDS features
                if mrna_id in cds_features:
                    cds_parts = validate_locations(cds_features[mrna_id])
                    
                    if cds_parts:
                        # Create locations for joined CDS
                        locations = [FeatureLocation(part['start'], part['end'], 
                                                   strand=part['strand']) 
                                   for part in cds_parts]
                        
                        # Create CDS feature
                        cds_location = CompoundLocation(locations) if len(locations) > 1 else locations[0]
                        cds_feature = SeqFeature(cds_location, type='CDS')
                        
                        # Add CDS qualifiers
                        cds_feature.qualifiers = {
                            'locus_tag': [f"{chr_id}_cds_{feature_count}"],
                            'transcript_id': [mrna_id],
                            'codon_start': ['1']
                        }
                        
                        # Extract and translate CDS sequence
                        try:
                            cds_seq = cds_feature.extract(chr_records[chr_id].seq)
                            protein_seq = cds_seq.translate()
                            cds_feature.qualifiers['translation'] = [str(protein_seq)]
                        except Exception as e:
                            print(f"Warning: Could not translate CDS for mRNA {mrna_id}: {str(e)}")
                        
                        # Add CDS feature to record
                        chr_records[chr_id].features.append(cds_feature)
                
                if feature_count % 1000 == 0:
                    print(f"Processed {feature_count} mRNAs...")
                    
            except Exception as e:
                print(f"Warning: Could not process mRNA {mrna_id}: {str(e)}")
                continue
    
    # Write chromosome records to GenBank file
    print("\nWriting GenBank file...")
    with open(output_gbk, "w") as out_handle:
        for chr_id in sorted(set(chr_records.keys())):
            if chr_id.startswith('Chr'):
                SeqIO.write(chr_records[chr_id], out_handle, "genbank")
    
    return feature_count, len(set(chr_id for chr_id in chr_records.keys() if chr_id.startswith('Chr')))

def main():
    if len(sys.argv) != 4:
        print("Usage: python script.py <input.fasta> <input.gff3> <output.gbk>")
        print("Example: python script.py genome.fasta annotation.gff3 output.gbk")
        sys.exit(1)
    
    fasta_file = sys.argv[1]
    gff_file = sys.argv[2]
    output_gbk = sys.argv[3]
    
    try:
        print("\nStarting conversion process...")
        total_features, total_chr = process_gff_and_fasta(fasta_file, gff_file, output_gbk)
        
        if total_features == 0:
            print("\nWarning: No features were found in the GFF file!")
        else:
            print(f"\nConversion complete!")
            print(f"Processed {total_chr} chromosomes")
            print(f"Added {total_features} mRNAs with their CDS features")
            print(f"GenBank file saved as: {output_gbk}")
            
    except Exception as e:
        print(f"\nError during conversion: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
